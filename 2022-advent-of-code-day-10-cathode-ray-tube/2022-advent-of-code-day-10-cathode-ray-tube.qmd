---
title: '2022 Advent of Code â€¢ Day 10 â€¢ ðŸ“º Cathode-Ray Tube'
author: 'boB Rudis'
format: html
echo: false
observable: 'https://observablehq.com/@hrbrmstr/2022-advent-of-code-day-10-cathode-ray-tube'
---

```{ojs}
md`# 2022 Advent of Code â€¢ [Day 10](https://adventofcode.com/2022/day/10) â€¢ ðŸ“º Cathode-Ray Tube`
```

```{ojs}
md`This answer is a bit resource wasteful, but the input is tiny, so it kind of doesn't matter.`
```

```{ojs}
viewof source = Inputs.radio(["Test input", "Puzzle input"], {
  label: "Select source:",
  value: "Test input"
})
```

```{ojs}
md`**What is the sum of the six signal strengths in the first part**? ${d3.format(",")(_.sum(
  [20, 60, 100, 140, 180, 220].map((cycle) => cycle * cycles[cycle - 1].duringX)
))}`
```

```{ojs}
md`**What eight capital letters appear on your CRT**? (only relevant for the second part's Puzzle Input)`
```

```{ojs}
html`<pre id="letters" style="line-height: 0.6">
${message}
</pre>`
```

```{ojs}
Plot.plot({
  marks: [
    Plot.cell(pixels, {
      x: (d) => d.x,
      y: (d) => d.y,
      fill: "black"
    })
  ]
})
```

```{ojs}
md`**OCR'd Text**`
```

```{ojs}
md`<strike>I need to figure out how to make this more reactive, but go down to [this code block](https://observablehq.com/@hrbrmstr/2022-advent-of-code-day-10-cathode-ray-tube?collection=@hrbrmstr/2022-advent-of-code#img) and tap into the source cell and "save" the notebook after ticking "Puzzle input" above to get Tesseract to OCR the letters.</strike>

I think I worked out the reactive bit. This shld change depending on the `input`.`
```

```{ojs}
{
  elem;
  return (await Tesseract.recognize(img)).text.trim();
}
```

```{ojs}
input = (source == "Test input" ? input00 : input01).split("\n").map((line) => {
  const [instr, val] = line.split(" ");
  return { instr: instr, val: parseInt(val) };
})
```

```{ojs}
md`This is memory-wasteful, but makes both parts super simple to accomplish. Leaving in unused structure members to help self-document the code.`
```

```{ojs}
cycles = {
  var X = 1;
  return input.flatMap(({ instr, val }) => {
    if (instr == "addx") {
      const currX = X;
      X += val;
      return [
        { instr: instr, opCycle: 1, opVal: val, duringX: currX, afterX: currX },
        { instr: instr, opCycle: 2, opVal: val, duringX: currX, afterX: X }
      ];
    } else {
      return [{ instr: instr, opCycle: 1, opVal: 0, duringX: X, afterX: X }];
    }
  });
}
```

```{ojs}
message = {
  return [0, 40, 80, 120, 160, 200] // cheat our way making rows since we know max row/col ahead of time
    .map((cycle) => {
      const row = " ".repeat(40).split(""); // row initially blank
      _.range(0 + cycle, 40 + cycle).forEach((v, i) => { // as each pixel is visited
        // again, kind of wasteful, but makes the solution easier to read
        const spritePos = [
          cycles[v].duringX - 1,
          cycles[v].duringX,
          cycles[v].duringX + 1
        ];
        if (spritePos.includes(i)) row[i] = "â–‘";
      });
      return row.join("");
    })
    .join("\n");
}
```

```{ojs}
md`Same as ^^ just returning X/Y for us to use in `Plot``
```

```{ojs}
pixels = {
  return [0, 40, 80, 120, 160, 200]
    .flatMap((cycle, r) => {
      const row = " ".repeat(40).split("");
      return _.range(0 + cycle, 40 + cycle).flatMap((v, c) => {
        const spritePos = [
          cycles[v].duringX - 1,
          cycles[v].duringX,
          cycles[v].duringX + 1
        ];
        if (spritePos.includes(c)) return { x: c, y: r };
      });
    })
    .filter((d) => d);
}
```

```{ojs}
md`I mean, since we have a nice, structured arrayâ€¦`
```

```{ojs}

```

```{ojs}
md`## Inputs`
```

```{ojs}
input00 = (await FileAttachment("input00.txt").text()).trim()
```

```{ojs}
input01 = (await FileAttachment("input01.txt").text()).trim()
```

```{ojs}
md`## Seeing if I can get Tesseract to OCR it`
```

```{ojs}
Tesseract = require("https://bundle.run/tesseract.js@1.0.10")
```

```{ojs}
md`Helper library to turn a DOM element into an image that we can pass to Tesseract.`
```

```{ojs}
domtoimage = import("https://cdn.skypack.dev/dom-to-image@2.6.0?min")
```

```{ojs}
md`Using a differeny "pixel glyph" to help with OCR`
```

```{ojs}
messageBlocks = {
  return [0, 40, 80, 120, 160, 200] // cheat our way making rows since we know max row/col ahead of time
    .map((cycle) => {
      const row = " ".repeat(40).split(""); // row initially blank
      _.range(0 + cycle, 40 + cycle).forEach((v, i) => {
        // as each pixel is visited
        // again, kind of wasteful, but makes the solution easier to read
        const spritePos = [
          cycles[v].duringX - 1,
          cycles[v].duringX,
          cycles[v].duringX + 1
        ];
        if (spritePos.includes(i)) row[i] = "â–ˆ";
      });
      return row.join("");
    })
    .join("\n");
}
```

```{ojs}
md`Messed with the line height to help OCR`
```

```{ojs}
html`<pre id='test' style='line-height:0.5'>${messageBlocks}</pre>`
```

```{ojs}
md`This is the image that gets made from ^^. Tweaked `width` and `height` to help OCR.`
```

```{ojs}
img = {
  elem; // this gets us reactivity
  var node = document.getElementById("test");
  const image = new Image();
  image.height = 60;
  image.src = await domtoimage.toPng(node, { width: 400, height: 80 });
  return image;
}
```

